var anchorGlobal = { 'fileObject': { 'root': {}, 'media': {}, 'video': {}, }, 'canvas': { 'id': 'anchorCanvas', 'object': '', 'scale': { 'width': 0.0, 'height': 0.0 }, 'stroke': { 'style': '#ff0000', 'lineWidth': 3 }, 'showWidth': 0.0, 'showHeight': 0.0 } }; function getFileObjectVideo() { return anchorGlobal.fileObject.video; } function getFileOjbectVideoFrameRate() { return anchorGlobal.fileObject.video.fps; } function getCanvasId() { return anchorGlobal.canvas.id; } function getCanvasObject() { return anchorGlobal.canvas.object; } function setCanvasObject(element) { anchorGlobal.canvas.object = element; } function setCanvasScale(width, height) { anchorGlobal.canvas.scale.width = width; anchorGlobal.canvas.scale.height = height; } function getCanvasScale() { return anchorGlobal.canvas.scale; } function setCanvasShowSize(width, height) { anchorGlobal.canvas.showWidth = width; anchorGlobal.canvas.showHeight = height; } function getCanvasShowSize(width, height) { return { 'width': anchorGlobal.canvas.showWidth, 'height': anchorGlobal.canvas.showHeight, }; } function getRectangleStroke() { return anchorGlobal.canvas.stroke; } function isCanvasObjectExist() { if (getCanvasObject() == {} || !getCanvasObject()) { return false; } return true; } function converFileRectangle(rectangle) { return { 'x': rectangle[0], 'y': rectangle[1], 'width': rectangle[2] - rectangle[0], 'height': rectangle[3] - rectangle[1], }; } function loadAnchorFile(file) { $.ajax({ type: "get", url: file, dataType: "json", async: false, success: function (data) { anchorGlobal.fileObject.root = data; anchorGlobal.fileObject.media = anchorGlobal.fileObject.root.media; anchorGlobal.fileObject.video = anchorGlobal.fileObject.media[0].video; setCanvasObject(null); } }); } function initCanvasElement(containerElement, videoElement, elementId) { if (isCanvasObjectExist()) { return false; } let tmpElement = document.getElementById(elementId); let tmpShowSize; setCanvasShowSize(videoElement.clientWidth, videoElement.clientHeight); tmpShowSize = getCanvasShowSize(); tmpElement.setAttribute('width', tmpShowSize.width); tmpElement.setAttribute('height', tmpShowSize.height); setCanvasScale(tmpShowSize.width / videoElement.videoWidth, tmpShowSize.height / videoElement.videoHeight); setCanvasObject(tmpElement); return true; } function drawAnchorRectangleByFrameNoOnCanvas(frameNo) { let tmpRectangleElement = null; let tmpFrameNo = frameNo; if (!isCanvasObjectExist()) { return; } tmpFrameNo = Math.round(tmpFrameNo); for(let anchor of getFileObjectVideo().anchors) { if (anchor.frameNo == tmpFrameNo) { tmpRectangleElement = anchor; break; } } if (null == tmpRectangleElement) { ClearCanvasAnchorRectangleArray(); return false; } else { return ShowCanvasAnchorRectangleEx(tmpRectangleElement); } return false; } function ClearCanvasAnchorRectangleArray() { getCanvasObject().getContext("2d").clearRect(0, 0, getCanvasShowSize().width, getCanvasShowSize().height); } function ShowCanvasAnchorRectangleEx(rectangleElement) { let tmpRectangle; let context = getCanvasObject().getContext("2d"); context.strokeStyle = getRectangleStroke().style; context.lineWidth = getRectangleStroke().lineWidth; context.clearRect(0, 0, getCanvasShowSize().width, getCanvasShowSize().height); for(let rectangle of rectangleElement.rectangles) { tmpRectangle = converFileRectangle(rectangle); context.strokeRect(tmpRectangle.x * getCanvasScale().width, tmpRectangle.y * getCanvasScale().height, tmpRectangle.width * getCanvasScale().width, tmpRectangle.height * getCanvasScale().height); } }